/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package co.moveapps.spa.core.controller.api;

import co.moveapps.spa.core.controller.model.CredentialsRequest;
import co.moveapps.spa.core.controller.model.CredentialsResponse;
import co.moveapps.spa.core.controller.model.ModelApiResponse;
import co.moveapps.spa.core.exception.BusinessException;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-04-05T03:56:38.469360-05:00[America/Bogota]")
@Validated
@Controller
@Tag(name = "access", description = "Operations about authentication")
public interface AuthApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /auth : Validate credentials and generate JWT
     * Generate JWT to access for use all apis for Nuevo SPA.
     *
     * @param credentialsRequest  (required)
     * @return success (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
            operationId = "login",
            summary = "Validate credentials and generate JWT",
            description = "Generate JWT to access for use all apis for Nuevo SPA.",
            tags = { "access" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "success", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CredentialsResponse.class))
                    }),
                    @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/auth",
            produces = { "application/json" },
            consumes = { "application/json" }
    )

    default ResponseEntity<CredentialsResponse> login(
            @Parameter(name = "CredentialsRequest", description = "", required = true) @Valid @RequestBody CredentialsRequest credentialsRequest
    ) throws BusinessException {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"access_token\" : \"access_token\", \"expiration_time\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}